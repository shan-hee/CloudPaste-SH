name: Deploy Worker

on:
  workflow_dispatch:
  repository_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21.x'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Verify Cloudflare Authentication
        run: |
          echo "Testing Cloudflare API connection..."
          npx wrangler whoami
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      
      - name: Cache Wrangler
        uses: actions/cache@v4
        with:
          path: |
            ~/.wrangler
            ~/.npm
          key: ${{ runner.os }}-wrangler-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-wrangler-
      
      - name: Setup KV Namespace
        run: |
          echo "Setting up KV namespace..."

          # 尝试创建命名空间，如果已存在会返回现有的ID
          NAMESPACE_OUTPUT=$(npx wrangler kv namespace create "PASTE_STORE" 2>&1)
          echo "Namespace creation output: $NAMESPACE_OUTPUT"

          # 从输出中提取ID (支持多种格式)
          PASTE_STORE_ID=""

          # 方法1: 从标准输出格式提取
          if [[ $NAMESPACE_OUTPUT =~ id\ =\ \"([^\"]+)\" ]]; then
            PASTE_STORE_ID="${BASH_REMATCH[1]}"
          fi

          # 方法2: 从错误信息中提取已存在的ID
          if [ -z "$PASTE_STORE_ID" ] && [[ $NAMESPACE_OUTPUT =~ already\ exists.*id:\ ([a-f0-9]{32}) ]]; then
            PASTE_STORE_ID="${BASH_REMATCH[1]}"
          fi

          # 方法3: 如果创建失败，尝试列出现有的命名空间
          if [ -z "$PASTE_STORE_ID" ]; then
            echo "Trying to find existing namespace..."
            LIST_OUTPUT=$(npx wrangler kv namespace list 2>/dev/null || echo "")
            if [ ! -z "$LIST_OUTPUT" ]; then
              # 尝试从列表中找到匹配的命名空间
              PASTE_STORE_ID=$(echo "$LIST_OUTPUT" | grep -i "paste" | head -1 | grep -o '[a-f0-9]\{32\}' | head -1)
            fi
          fi

          if [ -z "$PASTE_STORE_ID" ]; then
            echo "Error: Could not create or find KV namespace"
            echo "Output was: $NAMESPACE_OUTPUT"
            exit 1
          fi

          echo "PASTE_STORE_ID=$PASTE_STORE_ID" >> $GITHUB_ENV
          echo "Using KV namespace ID: $PASTE_STORE_ID"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      
      - name: Check and Create R2 Bucket
        run: |
          R2_BUCKET="cloudpaste-files"
          echo "Checking R2 bucket: $R2_BUCKET"

          # 检查bucket是否存在
          if npx wrangler r2 bucket list | grep -q "$R2_BUCKET"; then
            echo "R2 bucket already exists"
          else
            echo "Creating R2 bucket: $R2_BUCKET"
            npx wrangler r2 bucket create "$R2_BUCKET" --location apac
            echo "R2 bucket created successfully"
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}

      - name: Update wrangler.toml
        run: |
          if [ -z "$PASTE_STORE_ID" ]; then
            echo "Error: PASTE_STORE_ID is not set"
            exit 1
          fi

          echo "PASTE_STORE_ID: $PASTE_STORE_ID"

          # 更新 wrangler.toml 中的 KV namespace ID
          sed -i "s/placeholder-id/$PASTE_STORE_ID/g" wrangler.toml

          echo "Updated wrangler.toml configuration:"
          cat wrangler.toml
      
      - name: Build Project
        run: |
          if [ -f "package.json" ] && grep -q '"build"' package.json; then
            npm run build
          else
            echo "No build script found, skipping build step"
          fi

      - name: Deploy to Cloudflare Workers
        run: |
          npx wrangler deploy \
            --var ADMIN_USERNAME:"${{ secrets.ADMIN_USERNAME || 'admin' }}" \
            --var ADMIN_PASSWORD:"${{ secrets.ADMIN_PASSWORD || 'admin' }}" \
            --var ENVIRONMENT:"production"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
