name: Deploy Worker

on:
  workflow_dispatch:
  repository_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21.x'
          cache: 'npm'
      
      - name: Install Dependencies
        run: |
          npm ci
          npm install -g wrangler
      
      - name: Configure Wrangler
        run: |
          mkdir -p ~/.wrangler
          
          cat > ~/.wrangler/config.toml << EOF
          api_token = "${{ secrets.CF_API_TOKEN }}"
          account_id = "${{ secrets.CF_ACCOUNT_ID }}"
          EOF
          
          wrangler whoami
      
      - name: Cache Wrangler
        uses: actions/cache@v4
        with:
          path: |
            ~/.wrangler
            ~/.npm
          key: ${{ runner.os }}-wrangler-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-wrangler-
      
      - name: Check and Create KV Namespace
        run: |
          wrangler telemetry disable
          
          function create_kv_namespace() {
            local namespace=$1
            local namespace_title="cloudpaste-$namespace"
            echo "Processing KV namespace: $namespace_title"
            
            echo "Listing KV namespaces..."
            LIST_OUTPUT=$(wrangler kv:namespace list 2>/dev/null || echo "[]")
            echo "KV namespaces list output: $LIST_OUTPUT"
            
            if echo "$LIST_OUTPUT" | grep -q "$namespace_title"; then
              KV_ID=$(echo "$LIST_OUTPUT" | grep "$namespace_title" | awk '{print $1}')
              echo "KV namespace already exists with ID: $KV_ID"
            else
              echo "Creating KV namespace: $namespace_title"
              CREATE_OUTPUT=$(wrangler kv:namespace create "$namespace_title")
              if [ $? -ne 0 ]; then
                echo "Failed to create KV namespace: $namespace_title"
                echo "Create output: $CREATE_OUTPUT"
                exit 1
              fi
              
              KV_ID=$(echo "$CREATE_OUTPUT" | grep -o 'id = "[^"]*"' | cut -d'"' -f2)
              if [ -z "$KV_ID" ]; then
                echo "Failed to extract KV ID from create output"
                exit 1
              fi
              echo "Created KV namespace with ID: $KV_ID"
            fi
            
            echo "${namespace}_ID=$KV_ID" >> $GITHUB_ENV
            echo "Set environment variable ${namespace}_ID=$KV_ID"
          }
          
          create_kv_namespace "PASTE_STORE"
          create_kv_namespace "UPLOAD_STATUS"
      
      - name: Check and Create R2 Bucket
        run: |
          R2_BUCKET="cloudpaste-files"
          echo "Checking R2 bucket: $R2_BUCKET"
          
          BUCKET_LIST=$(wrangler r2 bucket list || echo "")
          if [ $? -ne 0 ]; then
            echo "Failed to list R2 buckets"
            exit 1
          fi
          
          if ! echo "$BUCKET_LIST" | grep -q "$R2_BUCKET"; then
            echo "Creating R2 bucket: $R2_BUCKET"
            if ! wrangler r2 bucket create "$R2_BUCKET" --location apac; then
              echo "Failed to create R2 bucket"
              exit 1
            fi
            echo "R2 bucket created successfully"
          else
            echo "R2 bucket already exists"
          fi

      - name: Update wrangler.toml
        run: |
          if [ -z "$PASTE_STORE_ID" ] || [ -z "$UPLOAD_STATUS_ID" ]; then
            echo "Error: KV namespace IDs are not set"
            exit 1
          fi
          
          echo "PASTE_STORE_ID: $PASTE_STORE_ID"
          echo "UPLOAD_STATUS_ID: $UPLOAD_STATUS_ID"
          
          # Create temporary file
          cat > wrangler.toml.tmp << EOF
          name = "cloudpaste"
          main = "src/index.js"
          compatibility_date = "2024-01-09"
          
          [vars]
          # 通过环境变量覆盖这些默认值
          ENVIRONMENT = "development"  # development/production
          TOTAL_STORAGE_GB = "6"      # 总存储容量，单位GB
          ADMIN_USERNAME = "admin"     # 管理员用户名
          ADMIN_PASSWORD = "admin"     # 管理员密码，生产环境建议通过环境变量设置
          MAX_FILE_SIZE = "500"       # 单个文件大小限制，单位MB
          SESSION_DURATION = "7d"      # 会话持续时间
          TEXT_UPLOAD_ENABLED = "true" # 文本上传开关
          FILE_UPLOAD_ENABLED = "true" # 文件上传开关
          
          [env.production]
          vars = { ENVIRONMENT = "production" }
          
          [env.development]
          vars = { ENVIRONMENT = "development" }
          
          [[kv_namespaces]]
          binding = "CLOUDPASTE_KV"
          id = "$PASTE_STORE_ID"
          preview_id = "$PASTE_STORE_ID"
          
          [[r2_buckets]]
          binding = "CLOUDPASTE_BUCKET"
          bucket_name = "cloudpaste-files"
          preview_bucket_name = "cloudpaste-files-dev"
          
          [site]
          bucket = "./public"
          
          [build]
          command = "npm run build"    # Pages 构建命令
          
          [triggers]
          crons = ["0 0 * * *"]       # 定时清理任务
          EOF
          
          # Replace the original file
          mv wrangler.toml.tmp wrangler.toml
          
          echo "Updated wrangler.toml configuration:"
          cat wrangler.toml
      
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@2.0.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          command: deploy --var ADMIN_USERNAME:${{ secrets.ADMIN_USERNAME }} --var ADMIN_PASSWORD:${{ secrets.ADMIN_PASSWORD }}
        env:
          ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
